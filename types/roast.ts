import * as S from '@fp-ts/schema'
import { pipe } from 'fp-ts/lib/function'

export const Roast = S.struct({
  beanChargeTemperature: S.number,
  beanDropTemperature: S.number,
  drumChargeTemperature: S.number,
  drumDropTemperature: S.number,
  beanTemperature: S.array(S.number),
  drumTemperature: S.array(S.number),
  beanDerivative: S.array(S.number),
  ibtsDerivative: S.array(S.union(S.number, S.null)),
  exitTemperature: S.array(S.number),
  preheatTemperature: S.number,
  roastStartIndex: S.number,
  roastEndIndex: S.number,
  totalRoastTime: S.number,
  indexFirstCrackStart: S.number,
  indexFirstCrackEnd: S.number,
  indexSecondCrackStart: S.number,
  indexSecondCrackEnd: S.number,
  indexYellowingStart: S.number,
  weightGreen: S.union(S.string, S.number),
  weightRoasted: S.union(S.string, S.number),
  roastNumber: S.number,
  sampleRate: S.number,
  serialNumber: S.optional(S.number),
  hardware: S.optional(S.number),
  IRSensor: S.optional(S.number),
  firmware: S.optional(S.number),
  actions: S.struct({
    actionTempList: S.array(S.unknown),
    actionTimeList: S.array(
      S.struct({
        ctrlType: S.number,
        index: S.number,
        value: S.number,
      })
    ),
  }),
  missingSeconds: S.optional(S.array(S.unknown)),
  rorPreheat: S.optional(S.union(S.number, S.null)),
  uid: S.optional(S.string),
  userId: S.string,
  dateTime: S.number,
  softwareVersion: S.optional(S.string),
  firmwareVersion: S.optional(S.number),
  roastName: S.optional(S.string),
  ambient: pipe(S.number, S.greaterThan(0)),
  humidity: pipe(S.number, S.greaterThan(0)),
  beanId: S.optional(S.union(S.string, S.null)),
  updatedAt: S.number,
  roastDegree: S.number,
  guid: S.optional(S.string),
  isPrivate: S.optional(S.number),
})
